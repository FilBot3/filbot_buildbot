# -*- python -*-
# ex: set filetype=python:
"""Buildbot master configuration
"""


import os
from buildbot.plugins import changes
from buildbot.plugins import schedulers
from buildbot.plugins import steps
from buildbot.plugins import util
from buildbot.plugins import worker


if os.environ.get('BUILDBOT_MASTER_CONFIG_ENV') == 'docker-local':
    import docker_local as bb
else:
    import local_builder as bb

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("local-worker", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol.  'port' must match
# the value configured into the workers (with their --master option)
c['protocols'] = {'pb': {'port': 9989}}

# SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In
# this case, just kick off a 'runtests' build
c['schedulers'] = []
c['schedulers'].extend(bb.master.bb_schedulers())

# BUILDERS
c['builders'] = []
c['builders'].extend(bb.master.bb_builders())

# BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.
c['services'] = []

# PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').
c['title'] = "FilBot-CI"
c['titleURL'] = "https://buildbot.net"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.
c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

# DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  It's easy
    # to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production
    # environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url': "sqlite:///state.sqlite",
}

c['buildbotNetUsageData'] = 'full'
